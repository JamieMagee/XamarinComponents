parameters:
  # job parameters
  - name: name
    default: 'build'                                        # the name of the build job for dependency purposes
  - name: displayName                                       # the human name of the job
    default: 'Build'
  - name: timeoutInMinutes                                  # the timeout in minutes
    default: 60
  - name: dependsOn                                         # any jobs this job depends on
    default: []
  - name: initSteps                                         # any steps to run before .NET global tools are installed
    default: []
  - name: preBuildSteps                                     # any steps that need to run just before the main compilation starts
    default: []
  - name: postBuildSteps                                    # any steps that need to run just after the main compilation ends
    default: []
  - name: masterBranchName                                  # the "master" branch that should be used - can be something other than "master"
    default: 'main'
  - name: installAppleCertificates                          # whether or not to install the Apple certificates and provisioning profiles
    default: 'true'
  - name: submodules                                        # whether or not to check out submodules
    default: false
  - name: areaPath                                          # the areaPath to log any issues
    default: ''
  - name: runChecks
    default: 'true'
  - name: continueOnError
    default: 'false'
  - name: publishJob                                        # the job to use as the source of the 'nuget' artifact: '', 'windows', 'macos', 'linux'
    default: ''
  - name: publishOutputSuffix                               # the artifact suffix to use when publishing the output folder
    default: ''
  - name: signListPath                                      # the path to the SignList.xml to copy into the nuget artifact for signing
    default: 'SignList.xml'
  # job software version parameters
  - name: linuxAgentPoolName                                # the name of the Linux VM pool
    default: 'Azure Pipelines'
  - name: macosAgentPoolName                                # the name of the macOS VM pool
    default: 'Azure Pipelines'
  - name: windowsAgentPoolName                              # the name of the Windows VM pool
    default: 'Azure Pipelines'
  - name: linuxImage                                        # the name of the Linux VM image (linuxImage: 'Hosted Ubuntu 1604')
    default: ''
  - name: macosImage                                        # the name of the macOS VM image
    default: 'macOS-11'
                                                            # 20211121
                                                            # macOS-latest = macOS-10.15
                                                            # macOS-11 required for XCode 13.1
  - name: windowsImage                                      # the name of the Windows VM image
    default: 'windows-latest'
  - name: windowsImageOverride                              # used to access 1ES hardened images: name of ImageOverride demand to use such as AzurePipelinesWindows2022compliant when windowsAgentPoolName set to the AzurePipelines-EO pool
    default: ''
  - name: mono                                              # the version of mono to use
    default: 'Latest'
  - name: xcode                                             # the version of Xcode to use
    default: '13.1'
  - name: dotnet                                            # the version of .NET Core to use
    default: '6.0.100'
  - name: dotnetStable                                      # the stable version of .NET Core to use
    default: '3.1.415'
  - name: cake                                              # the version of Cake to use
    default: '0.38.5'
  - name: apiTools                                          # the version of the api-tools CLI to use
    default: '1.1.0-preview.1'
  - name: xharness
    default: '1.0.0-prerelease.20602.1'
  - name: tools                                             # a list of any additional .NET Core tools needed
    default: []
  - name: cakeTemplatesBranch
    default: 'main'                                         # the branch of XamarinComponents that has the templates
  # build parameters
  - name: buildType                                         # the type of build: 'basic', 'manifest', 'directories', 'none'
    default: 'basic'
  - name: steps                                             # the steps to use when building, typically for 'none'
    default: []
  - name: verbosity                                         # the build verbosity: 'minimal', 'normal', 'diagnostic'
    default: 'normal'
  - name: configuration                                     # the build configuration: 'Debug', 'Release'
    default: 'Release'
  - name: validPackagePrefixes                              # any NuGet prefixes that should pass validation
    default: [ 'Xamarin', 'Mono' ]
  - name: artifactsPath                                     # the path to the NuGet packages that need to be signed, verified and published
    default: 'output'
  # basic cake build parameters
  - name: cakeTarget                                        # [basic] the Cake target to run (defaults to 'ci')
    default: 'ci'
  - name: cakeFile                                          # [basic] the path to the build.cake file (can be any filename)
    default: 'build.cake'
  - name: cakeExtraArgs                                     # [basic] any additional cake CLI arguments
    default: ''
  # manifest-based build parameters
  - name: forceBuild                                        # [manifest, directories] whether or not to force the build
    default: 'false'
  - name: namesFilter                                       # [manifest, directories] the names of the items to build
    default: ''
  - name: targetsFilter                                     # [manifest, directories] the targets of the items to build
    default: 'ci'

  - name: BuildPlatforms
    type: object
    default:
      # - ${{ if ne(parameters.linuxImage, '') }}:
      - name: linux
        poolName: ${{ parameters.linuxAgentPoolName }}
        imageName: ${{ parameters.linuxImage }}
        poolDemand: Agent.Name
      # - ${{ if ne(parameters.macosImage, '') }}:
      - name: macOS
        poolName: ${{ parameters.macosAgentPoolName }}
        imageName: ${{ parameters.macosImage }}
        poolDemand: Agent.Name
      # - ${{ if or(ne(parameters.windowsAgentPoolName, 'Azure Pipelines'), ne(parameters.windowsImage, '')) }}:
      - name: windows
        poolName: ${{ parameters.windowsAgentPoolName }}
        imageName: ${{ parameters.windowsImage }}
        poolDemand: Agent.Name

jobs:
- ${{ each buildPlatform in parameters.BuildPlatforms }}:
  - job: ${{ parameters.name }}_${{ buildPlatform.name }}
    displayName: ${{ parameters.displayName }} ${{ buildPlatform.name }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    continueOnError: ${{ eq(parameters.continueOnError, 'true') }}
    dependsOn: ${{ parameters.dependsOn }}
    pool:
      name: ${{ buildPlatform.poolName }}
      vmImage: ${{ buildPlatform.imageName }}
      demands:
      - ${{ buildPlatform.poolDemand }}
    steps:
    - template: build.steps.yml
      parameters:
        name: ${{ parameters.name }}
        displayName: ${{ parameters.displayName }}
        timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
        dependsOn: ${{ parameters.dependsOn }}
        initSteps: ${{ parameters.initSteps }}
        preBuildSteps: ${{ parameters.preBuildSteps }}
        postBuildSteps: ${{ parameters.postBuildSteps }}
        masterBranchName: ${{ parameters.masterBranchName }}
        installAppleCertificates: ${{ parameters.installAppleCertificates }}
        submodules: ${{ parameters.submodules }}
        areaPath: ${{ parameters.areaPath }}
        runChecks: ${{ parameters.runChecks }}
        continueOnError: ${{ parameters.continueOnError }}
        publishJob: ${{ parameters.publishJob }}
        publishOutputSuffix: ${{ parameters.publishOutputSuffix }}
        signListPath: ${{ parameters.signListPath }}
        linuxAgentPoolName: ${{ parameters.linuxAgentPoolName }}
        macosAgentPoolName: ${{ parameters.macosAgentPoolName }}
        windowsAgentPoolName: ${{ parameters.windowsAgentPoolName }}
        linuxImage: ${{ parameters.linuxImage }}
        macosImage: ${{ parameters.macosImage }}
        windowsImage: ${{ parameters.windowsImage }}
        windowsImageOverride: ${{ parameters.windowsImageOverride }}
        mono: ${{ parameters.mono }}
        xcode: ${{ parameters.xcode }}
        dotnet: ${{ parameters.dotnet }}
        dotnetStable: ${{ parameters.dotnetStable }}
        cake: ${{ parameters.cake }}
        apiTools: ${{ parameters.apiTools }}
        xharness: ${{ parameters.xharness }}
        tools: ${{ parameters.tools }}
        cakeTemplatesBranch: ${{ parameters.cakeTemplatesBranch }}
        buildType: ${{ parameters.buildType }}
        steps: ${{ parameters.steps }}
        verbosity: ${{ parameters.verbosity }}
        configuration: ${{ parameters.configuration }}
        validPackagePrefixes: ${{ parameters.validPackagePrefixes }}
        artifactsPath: ${{ parameters.artifactsPath }}
        cakeTarget: ${{ parameters.cakeTarget }}
        cakeFile: ${{ parameters.cakeFile }}
        cakeExtraArgs: ${{ parameters.cakeExtraArgs }}
        forceBuild: ${{ parameters.forceBuild }}
        namesFilter: ${{ parameters.namesFilter }}
        targetsFilter: ${{ parameters.targetsFilter }}

- ${{ if and(eq(parameters.runChecks, 'true'), eq(variables['System.TeamProject'], 'devdiv')) }}:
  - job: ${{ parameters.name }}_checks
    displayName: 'Run required code checks'
    condition: eq('refs/heads/${{ parameters.masterBranchName }}', variables['Build.SourceBranch'])
    pool:
      name: 'Hosted Windows 2019 with VS2019'
    steps:
    - pwsh: |
        $repo = "$(Build.Repository.Id)"
        $repo = $repo.Substring($repo.IndexOf("/") + 1)
        $branch = "${{ parameters.masterBranchName }}"
        $CODEBASE_NAME = $repo + "_" + $branch
        echo "Using codebase: $CODEBASE_NAME"
        Write-Host "##vso[task.setvariable variable=CODEBASE_NAME]$CODEBASE_NAME"
    - task: CredScan@2
      displayName: 'Analyze source for credentials'
      inputs:
        toolMajorVersion: 'V2'
    - task: PoliCheck@1
      inputs:
        inputType: 'Basic'
        targetType: 'F'
    - task: SdtReport@1
      displayName: 'Create security analysis report'
      inputs:
        AllTools: false
        APIScan: false
        BinSkim: false
        CodesignValidation: false
        CredScan: true
        FortifySCA: false
        FxCop: false
        ModernCop: false
        MSRD: false
        PoliCheck: true
        RoslynAnalyzers: false
        SDLNativeRules: false
        Semmle: false
        TSLint: false
        ToolLogsNotFoundAction: 'Standard'
    - task: PublishSecurityAnalysisLogs@3
      displayName: 'Publish security analysis logs'
    - task: TSAUpload@1
      continueOnError: true
      inputs:
        tsaVersion: 'TsaV2'
        codebase: 'NewOrUpdate'
        tsaEnvironment: 'PROD'
        codeBaseName: '$(CODEBASE_NAME)'
        notificationAlias: 'xamacomd@microsoft.com'
        notifyAlwaysV2: false
        instanceUrlForTsaV2: 'DEVDIV'
        projectNameDEVDIV: 'DevDiv'
        areaPath: '${{ parameters.areaPath }}'
        iterationPath: 'DevDiv\OneVS'
        uploadAPIScan: false
        uploadBinSkim: false
        uploadCredScan: true
        uploadFortifySCA: false
        uploadFxCop: false
        uploadModernCop: false
        uploadPoliCheck: true
        uploadPREfast: false
        uploadRoslyn: false
        uploadTSLint: false
        uploadAsync: true
